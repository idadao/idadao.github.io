{"meta":{"title":"大道技术博客","subtitle":"","description":"","author":"Dadao","url":"https://idadao.github.io","root":"/"},"pages":[{"title":"关于","date":"2021-09-01T06:11:29.000Z","updated":"2021-09-02T07:08:43.634Z","comments":true,"path":"about/index.html","permalink":"https://idadao.github.io/about/index.html","excerpt":"","text":"欢迎大家的光临, 期待一起学习交流"},{"title":"categories","date":"2021-09-01T06:11:18.000Z","updated":"2021-09-02T07:06:42.540Z","comments":true,"path":"categories/index.html","permalink":"https://idadao.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-09-01T06:11:11.000Z","updated":"2021-09-02T07:06:42.540Z","comments":true,"path":"tags/index.html","permalink":"https://idadao.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Spring事务传播7种行为","slug":"Spring事务传播7种行为","date":"2021-09-08T03:28:31.000Z","updated":"2021-09-08T08:04:53.128Z","comments":true,"path":"2021/09/08/Spring事务传播7种行为/","link":"","permalink":"https://idadao.github.io/2021/09/08/Spring%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD7%E7%A7%8D%E8%A1%8C%E4%B8%BA/","excerpt":"","text":"事务的属性 原子性（Atomicity）：事务可以确保一系列的操作要么都成功，要么都失败，不会出现部分成功的情况。 一致性（Consistency）： 从Wikipedia引入一句解释： Consistency ensures that a transaction can only bring the database from one valid state to another, maintaining database invariants: any data written to the database must be valid according to all defined rules, including constraints, cascades,triggers, and any combination thereof. This prevents database corruption by an illegal transaction, but does not guarantee that a transaction is *correct*. 可以清晰理解到，事务一致性是通过AID三个属性来保障数据库能从一个正确的状态转义到另一个正确的状态。其中AID属性是前提，C是达到的目的。 隔离性（Isolation）：不同事务之间对数据的操作是相互隔离的，不会相互影响导致数据遭到破坏。 持久性（Durability）：事务的结果被写到持久化存储器中，一旦完成不会因为其他的错误导致变化。 Spring中事务的使用方式 通过代码的方式 在代码逻辑种使用TransactionTemplate或者PlatformTransactionManager，对代码种存在的事务进行管理，好处是比较灵活，适合用来写一些通用的处理方法，并且回滚触发其他逻辑。 123456789101112131415@ResourcePlatformTransactionManager transactionManager;public Result insert()&#123; DefaultTransactionDefinition def = new DefaultTransactionDefinition(); def.setPropagationBehavior(0); try &#123; status = this.transactionManager.getTransaction(def); // 业务处理 this.transactionManager.commit(status); &#125; catch (Exception e) &#123; this.transactionManager.rollback(status); // 触发回滚的逻辑，比如增加日志，触发报警等等 &#125;&#125; 通过注解 注解是通过代理的方式来实现的，好处是对业务代码无侵入，有7种事务传播行为，可以覆盖日常开发场景。 12345678910111213@Transactional(rollbackFor = Exception.class)public void insert(Data data)&#123; // 方法必须是public，注解才能生效 boolean ret = mapper1.insert(data); if(!ret)&#123; return; &#125; ret = mapper2.update(data); if(!ret)&#123; // 失败抛出异常，会导致mapper1.insert(data)回滚 throw new Service(&quot;Failed to update data.&quot;); &#125;&#125; 事务的传播行为业务复杂一点的话都需要对函数进行拆分，一个函数只做一个类型的事情，所以不同的函数在相互调用的时候，需要控制对应的事务执行。 PROPAGATION_REQUIREDSpring默认的传播机制，外层方法调用内层方法，内层会被包含在外层事务一起执行和回滚，如果外层无事务，则内层会创建事务执行 12345678@Transactional(propagation = Propagation.REQUIRED)public void funcA()&#123; funcB();&#125;@Transactional(propagation = Propagation.REQUIRED)public void funcB()&#123; &#125; 如果单独调用funcB()，会以事务执行；如果funcA()调用funcB()，则funcB()会加入到funcA()事务中。 PROPAGATION_REQUIRED_NEW使用 JtaTransactionManager作为事务管理器。每个方法会创建一个新的事务，如果外层有事务会被挂起，执行完内部才执行外部。内外的事务是相互独立不相互干扰的。 12345678@Transactional(propagation = Propagation.REQUIRED)public void funcA()&#123; funcB();&#125;@Transactional(propagation = Propagation.REQUIRED_NEW)public void funcB()&#123; &#125; 如果单独调用funcB()，会以事务执行；但是如果funcA()调用funcB()， 那么外层的funcA()会被挂起，直到funcB()执行完，才恢复funcA()事务，并且funcB()事务执行成功与否，不会影响到func()事务的执行。 PROPAGATION_SUPPORT外层如果没有事务，那么内层以非事务执行，否则会以事务执行。 12345678@Transactional(propagation = Propagation.REQUIRED)public void funcA()&#123; funcB();&#125;@Transactional(propagation = Propagation.REQUIRED_SUPPORT)public void funcB()&#123; &#125; 单独调用funcB(), 会以非事务执行；funcA()调用funcB(), 那么funcB()会加入到funcA()的事务中，如果funcA()无事务，那么调用funcB()也没有事务了。 PROPAGATION_NOT_SUPPORT使用JtaTransactionManager作为事务管理器。明确标注不支持事务，单独运行时以非事务执行，若果外层调用方法有事务，则会挂起外层事务，直到内层执行完才恢复外层事务。 12345678@Transactional(propagation = Propagation.REQUIRED)public void funcA()&#123; funcB();&#125;@Transactional(propagation = Propagation.REQUIRED_NOT_SUPPORT)public void funcB()&#123; &#125; 单独执行funcB()无事务，如果funcA()调用funcB()，那么funcA()中的事务会被挂起，等funcB()执行完，才恢复事务继续commit或者rollback PROPAGATION_NEVER强烈的拒绝使用事务，如果你敢用，它就敢抛异常，应用场景应该是为了避免事务使用，在开发阶段可以确定。 PROPAGATION_MANDATORY和PROPAGATION_NEVER不同，如果外层你不用事务，就抛异常。加了该注解的方法，无法单独运行，需要有事务的方法去调用，否则会抛IllegalTransactionStateException。 PROPAGATION_NESTED 使用JDBC 3.0驱动时,仅仅支持DataSourceTransactionManager作为事务管理器。使用PROPAGATION_NESTED，需要把PlatformTransactionManager的nestedTransactionAllowed属性设为true(默认为false)。如果是单独调用，则和PROPAGATION_REQUIRED一样；如果外层有事务，则以嵌套的方式执行。并且内层事务在捕获了异常后进行回滚，不会导致外层的回滚；如果异常抛出了，是会导致外层事务回滚的。但是外层一旦失败，会导致内层回滚。 以上方法之间的调用，如果是在同一个类里面，事务会失效。因为事务注解是基于动态代理实现的，根据spring的bean的管理，同一个bean是走原始的方法调用，不会被TransactionalInterceptor拦截而加入到事务里面。常见处理办法是：一、将方法放在两个类；二、注入自己，通过注入的对象调用。 各种TransactionManager PlatformTransactionManager(平台事务管理器) 事务管理的核心接口，Spring为不同的持久化框架(ORM)提供了不同的接口实现，主要有： 1234567891011121314/*** 根据事务的传播行为，返回一个active的事务，或者重新创建一个*/TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException;/** * 提交事务 */void commit(TransactionStatus status) throws TransactionException;/** * 事务回滚 */void rollback(TransactionStatus status) throws TransactionException; DataSourceTransactionManager Spring JDBC或者ibatis会使用到，实际上也是实现了PlatformTransactionManager接口。主要方法有： 12345678910111213141516171819202122232425262728/*** 获取连接，设置隔离级别*/protected void doBegin(Object transaction, TransactionDefinition definition);/*** 挂起事务*/protected Object doSuspend(Object transaction);/*** 恢复事务*/protected void doResume(@Nullable Object transaction, Object suspendedResources);/*** 提交事务*/protected void doCommit(DefaultTransactionStatus status);/*** 回滚事务*/protected void doRollback(DefaultTransactionStatus status);/*** 设置回滚的转态，只在提交之前做校验*/protected void doSetRollbackOnly(DefaultTransactionStatus status);/*** 回滚事务*/protected void doCleanupAfterCompletion(Object transaction); HibernateTransactionManager Hibernate3.0会使用到。核心方法同上，是为了适配Hibernate而存在。 JpaTransactionManager 全称Persistence API。JPA通过JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库。 JdoTransactionManager JDO(Java Data Object )是Java对象持久化的新的规范，也是一个用于存取某种数据仓库中的对象的标准化API。 JtaTransactionManager 即Java Transaction API，译为Java事务API。 JTA允许应用程序执行分布式事务处理——在两个或多个网络计算机资源上访问并且更新数据。JDBC驱动程序的JTA支持极大地增强了数据访问能力。","categories":[{"name":"Spring","slug":"Spring","permalink":"https://idadao.github.io/categories/Spring/"}],"tags":[{"name":"事务","slug":"事务","permalink":"https://idadao.github.io/tags/%E4%BA%8B%E5%8A%A1/"},{"name":"Spring","slug":"Spring","permalink":"https://idadao.github.io/tags/Spring/"}]},{"title":"Git命令行cherry-pick和rebase","slug":"Git命令行cherry-pick和rebase","date":"2021-09-02T04:00:39.000Z","updated":"2021-09-02T07:06:42.540Z","comments":true,"path":"2021/09/02/Git命令行cherry-pick和rebase/","link":"","permalink":"https://idadao.github.io/2021/09/02/Git%E5%91%BD%E4%BB%A4%E8%A1%8Ccherry-pick%E5%92%8Crebase/","excerpt":"","text":"cherry-pick和rebase的作用 日常开发过程中，会创建各种分支，比如发布release之后，需要在release上开启hotfix以及v1.1版本，其中hotfix是针对当前已发布的版本做修复，而v1.1则进入了下一个迭代。你说巧不巧，产品经理说迭代版本v1.1上的功能点要搭顺风车在hotfix上一起发布。聪明的小伙伴肯定不是完成一个分支后拷贝到另一个分支啦。这里需要用到cherry-pick，或者rebase。 首先谈谈cherry-pick, 这个命令行，可以将v1.1分支的commitA单个提交， 或者commitA~commitC的一个范围的提交同步到hotfix，命令行如下： 1234567git checkout v1.1 # 切换迭代分支git log # 查看已经提交的记录，找到提交的commit的hash值假设是 63f481be380c81d73436dcdfd7aeaa47563e896fgit checkout hotfix # 切换到紧急版本分支git pull --rebase # 更新代码git cherry-pick 63f481be380c81d73436dcdfd7aeaa47563e896f # 把这个commit合并到hotfix(git cherry-pick 63f481be380c81d73436dcdfd7aeaa47563e896f 19f676839bd11b86897f7830223d3fd7751a9dc0 #也可以合并两个commit之间的所有提交)git push # 不要忘记push, 否则不会生效 rebase也可以做类似操作，如下： 123(git rebase [startpoint] [endpoint] --onto [branchName] # startpoint不会被包含在内)git rebase 63f481be380c81d73436dcdfd7aeaa47563e896f^ 19f676839bd11b86897f7830223d3fd7751a9dc0 --onto hotfix # 可以在commit后加一个^，代表它的前一次提交# 如果是从当前head到某个commit, [startpoint]是可以省略不填的 同时，rebase还有修改提交的commit的操作： 123456789101112131415161718192021222324git rebase -i [startpoint] [endpoint] # i代表interactive用户可以在交互模式下编辑commit, startpoint同上可以省略# 进入编辑页面pick 771cfe4 optpick fd4353a otpick 19f6768 add visitorspick 77a8375 add visitorspick 63f481b add searchpick 0c42e5b rm socialpick 0faf25c add new page#默认pick(缩写p)提交是生效的，还有以下不同的操作：#reword：保留此commit，同时需要修改注释（缩写:r）#edit：保留此commit, 需要修改提交的内容以及注释（缩写:e）#squash：将此commit和前一个commit进行合并（缩写:s）#fixup：将此commit和前一个commit进行合并，不保留注释（缩写:f）#exec：执行shell（缩写:x）#drop：丢弃此commit，即从提交记录里剥离（缩写:d）# 根据实际需求，修改保存后git push# 最后查看提交的情况git log","categories":[{"name":"Git","slug":"Git","permalink":"https://idadao.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://idadao.github.io/tags/Git/"}]},{"title":"Mysql中的explain用法","slug":"MySQL中的explain用法","date":"2021-08-31T08:24:57.000Z","updated":"2021-09-02T07:06:42.540Z","comments":true,"path":"2021/08/31/MySQL中的explain用法/","link":"","permalink":"https://idadao.github.io/2021/08/31/MySQL%E4%B8%AD%E7%9A%84explain%E7%94%A8%E6%B3%95/","excerpt":"","text":"explain可以做什么？ 通过explain(执行计划)，可以模拟优化器执行SQL语句，从而可以很直观的了解到执行过程中出现性能问题，帮助优化SQL。 explain不能做什么？ select之外的操作无法解释 不会使用cache 部分统计不精准，是估算的 无法显示MySQL的优化内容 无法展示促会发起、存储器的信息以及用户自定义函数对查询的影响 explain有哪些属性 以上图片来自网络，如有侵权请与本人联系","categories":[{"name":"Mysql","slug":"Mysql","permalink":"https://idadao.github.io/categories/Mysql/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"https://idadao.github.io/tags/Mysql/"},{"name":"explain","slug":"explain","permalink":"https://idadao.github.io/tags/explain/"}]}],"categories":[{"name":"Spring","slug":"Spring","permalink":"https://idadao.github.io/categories/Spring/"},{"name":"Git","slug":"Git","permalink":"https://idadao.github.io/categories/Git/"},{"name":"Mysql","slug":"Mysql","permalink":"https://idadao.github.io/categories/Mysql/"}],"tags":[{"name":"事务","slug":"事务","permalink":"https://idadao.github.io/tags/%E4%BA%8B%E5%8A%A1/"},{"name":"Spring","slug":"Spring","permalink":"https://idadao.github.io/tags/Spring/"},{"name":"Git","slug":"Git","permalink":"https://idadao.github.io/tags/Git/"},{"name":"Mysql","slug":"Mysql","permalink":"https://idadao.github.io/tags/Mysql/"},{"name":"explain","slug":"explain","permalink":"https://idadao.github.io/tags/explain/"}]}